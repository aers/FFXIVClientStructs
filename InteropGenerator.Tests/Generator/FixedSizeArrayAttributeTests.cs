using InteropGenerator.Tests.Helpers;
using Xunit;
using VerifyIG = InteropGenerator.Tests.Helpers.IncrementalGeneratorVerifier<InteropGenerator.Generator.InteropGenerator>;

namespace InteropGenerator.Tests.Generator;

public class FixedSizeArrayAttributeTests {
    [Fact]
    public async Task GenerateFixedArray() {
        const string code = """
                            using InteropGeneratorTesting;

                            [GenerateInterop]
                            public partial struct TestStruct
                            {
                                [FixedSizeArray]
                                internal FixedSizeArray10<int> _tenIntArray;
                            }
                            """;

        const string result = """
                              // <auto-generated/>
                              unsafe partial struct TestStruct
                              {
                                  /// <inheritdoc cref="_tenIntArray" />
                                  [global::System.Diagnostics.CodeAnalysis.UnscopedRefAttribute] public Span<int> TenIntArray => _tenIntArray;
                              }
                              """;

        await VerifyIG.VerifyGeneratorAsync(
            code,
            ("TestStruct.InteropGenerator.g.cs", result),
            SourceGeneration.GetFixedSizeArraySource([10]));
    }

    [Fact]
    public async Task GenerateFixedArrayObsolete() {
        const string code = """
                            using InteropGeneratorTesting;

                            [GenerateInterop]
                            public partial struct TestStruct
                            {
                                [Obsolete("This field is obsolete")]
                                [FixedSizeArray]
                                internal FixedSizeArray10<int> _tenIntArray;
                            }
                            """;

        const string result = """
                              // <auto-generated/>
                              unsafe partial struct TestStruct
                              {
                                  /// <inheritdoc cref="_tenIntArray" />
                                  [global::System.ObsoleteAttribute("This field is obsolete")]
                                  [global::System.Diagnostics.CodeAnalysis.UnscopedRefAttribute] public Span<int> TenIntArray => _tenIntArray;
                              }
                              """;

        await VerifyIG.VerifyGeneratorAsync(
            code,
            ("TestStruct.InteropGenerator.g.cs", result),
            SourceGeneration.GetFixedSizeArraySource([10]));
    }

    [Fact]
    public async Task GenerateSameFixedArray() {
        const string code = """
                            using InteropGeneratorTesting;

                            [GenerateInterop]
                            public partial struct TestStruct
                            {
                                [FixedSizeArray]
                                internal FixedSizeArray10<int> _tenIntArray;
                                
                                [FixedSizeArray]
                                internal FixedSizeArray10<uint> _tenUIntArray;
                            }
                            """;

        const string result = """
                              // <auto-generated/>
                              unsafe partial struct TestStruct
                              {
                                  /// <inheritdoc cref="_tenIntArray" />
                                  [global::System.Diagnostics.CodeAnalysis.UnscopedRefAttribute] public Span<int> TenIntArray => _tenIntArray;
                                  /// <inheritdoc cref="_tenUIntArray" />
                                  [global::System.Diagnostics.CodeAnalysis.UnscopedRefAttribute] public Span<uint> TenUIntArray => _tenUIntArray;
                              }
                              """;

        await VerifyIG.VerifyGeneratorAsync(
            code,
            ("TestStruct.InteropGenerator.g.cs", result),
            SourceGeneration.GetFixedSizeArraySource([10]));
    }

    [Fact]
    public async Task GenerateDifferentFixedArrays() {
        const string code = """
                            using InteropGeneratorTesting;

                            [GenerateInterop]
                            public partial struct TestStruct
                            {
                                [FixedSizeArray]
                                internal FixedSizeArray10<int> _tenIntArray;
                                
                                [FixedSizeArray]
                                internal FixedSizeArray57<uint> _fiftySevenUIntArray;
                            }
                            """;

        const string result = """
                              // <auto-generated/>
                              unsafe partial struct TestStruct
                              {
                                  /// <inheritdoc cref="_tenIntArray" />
                                  [global::System.Diagnostics.CodeAnalysis.UnscopedRefAttribute] public Span<int> TenIntArray => _tenIntArray;
                                  /// <inheritdoc cref="_fiftySevenUIntArray" />
                                  [global::System.Diagnostics.CodeAnalysis.UnscopedRefAttribute] public Span<uint> FiftySevenUIntArray => _fiftySevenUIntArray;
                              }
                              """;

        await VerifyIG.VerifyGeneratorAsync(
            code,
            ("TestStruct.InteropGenerator.g.cs", result),
            SourceGeneration.GetFixedSizeArraySource([10, 57]));
    }

    [Fact]
    public async Task GenerateFixedArrayByteString() {
        const string code = """
                            using InteropGeneratorTesting;

                            [GenerateInterop]
                            public partial struct TestStruct
                            {
                                [FixedSizeArray(isString: true)]
                                internal FixedSizeArray10<byte> _testField;
                            }
                            """;

        const string result = """
                              // <auto-generated/>
                              unsafe partial struct TestStruct
                              {
                                  /// <inheritdoc cref="_testField" />
                                  [global::System.Diagnostics.CodeAnalysis.UnscopedRefAttribute] public Span<byte> TestField => _testField;
                                  /// <inheritdoc cref="_testField" />
                                  public string TestFieldString
                                  {
                                      get => global::System.Text.Encoding.UTF8.GetString(global::System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpanFromNullTerminated((byte*)global::System.Runtime.CompilerServices.Unsafe.AsPointer(ref _testField[0])));
                                      set
                                      {
                                          if (global::System.Text.Encoding.UTF8.GetByteCount(value) > 10 - 1)
                                          {
                                              InteropGenerator.Runtime.ThrowHelper.ThrowStringSizeTooLarge("TestFieldString", 10);
                                          }
                                          global::System.Text.Encoding.UTF8.GetBytes(value.AsSpan(), _testField);
                                          _testField[9] = 0;
                                      }
                                  }
                              }
                              """;

        await VerifyIG.VerifyGeneratorAsync(
            code,
            ("TestStruct.InteropGenerator.g.cs", result),
            SourceGeneration.GetFixedSizeArraySource([10]));
    }

    [Fact]
    public async Task GenerateFixedArrayByteStringObsolete() {
        const string code = """
                            using InteropGeneratorTesting;

                            [GenerateInterop]
                            public partial struct TestStruct
                            {
                                [Obsolete("This field is obsolete")]
                                [FixedSizeArray(isString: true)]
                                internal FixedSizeArray10<byte> _testField;
                            }
                            """;

        const string result = """
                              // <auto-generated/>
                              unsafe partial struct TestStruct
                              {
                                  /// <inheritdoc cref="_testField" />
                                  [global::System.ObsoleteAttribute("This field is obsolete")]
                                  [global::System.Diagnostics.CodeAnalysis.UnscopedRefAttribute] public Span<byte> TestField => _testField;
                                  /// <inheritdoc cref="_testField" />
                                  [global::System.ObsoleteAttribute("This field is obsolete")]
                                  public string TestFieldString
                                  {
                                      get => global::System.Text.Encoding.UTF8.GetString(global::System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpanFromNullTerminated((byte*)global::System.Runtime.CompilerServices.Unsafe.AsPointer(ref _testField[0])));
                                      set
                                      {
                                          if (global::System.Text.Encoding.UTF8.GetByteCount(value) > 10 - 1)
                                          {
                                              InteropGenerator.Runtime.ThrowHelper.ThrowStringSizeTooLarge("TestFieldString", 10);
                                          }
                                          global::System.Text.Encoding.UTF8.GetBytes(value.AsSpan(), _testField);
                                          _testField[9] = 0;
                                      }
                                  }
                              }
                              """;

        await VerifyIG.VerifyGeneratorAsync(
            code,
            ("TestStruct.InteropGenerator.g.cs", result),
            SourceGeneration.GetFixedSizeArraySource([10]));
    }

    [Fact]
    public async Task GenerateFixedArrayCharString() {
        const string code = """
                            using InteropGeneratorTesting;

                            [GenerateInterop]
                            public partial struct TestStruct
                            {
                                [FixedSizeArray(isString: true)]
                                internal FixedSizeArray10<char> _testField;
                            }
                            """;

        const string result = """
                              // <auto-generated/>
                              unsafe partial struct TestStruct
                              {
                                  /// <inheritdoc cref="_testField" />
                                  [global::System.Diagnostics.CodeAnalysis.UnscopedRefAttribute] public Span<char> TestField => _testField;
                                  /// <inheritdoc cref="_testField" />
                                  public string TestFieldString
                                  {
                                      get => new string((char*)global::System.Runtime.CompilerServices.Unsafe.AsPointer(ref _testField[0]));
                                      set
                                      {
                                          if (value.Length > 10 - 1)
                                          {
                                              InteropGenerator.Runtime.ThrowHelper.ThrowStringSizeTooLarge("TestFieldString", 10);
                                          }
                                          value.CopyTo(_testField);
                                          _testField[9] = '\0';
                                      }
                                  }
                              }
                              """;

        await VerifyIG.VerifyGeneratorAsync(
            code,
            ("TestStruct.InteropGenerator.g.cs", result),
            SourceGeneration.GetFixedSizeArraySource([10]));
    }

    [Fact]
    public async Task GenerateFixedArrayBitArray() {
        const string code = """
                            using InteropGeneratorTesting;

                            [GenerateInterop]
                            public partial struct TestStruct
                            {
                                [FixedSizeArray(isBitArray: true, bitCount: 13)]
                                internal FixedSizeArray3<byte> _testField;
                            }
                            """;

        const string result = """
                              // <auto-generated/>
                              unsafe partial struct TestStruct
                              {
                                  /// <inheritdoc cref="_testField" />
                                  [global::System.Diagnostics.CodeAnalysis.UnscopedRefAttribute] public Span<byte> TestField => _testField;
                                  /// <inheritdoc cref="_testField" />
                                  public BitArray TestFieldBitArray => new BitArray((byte*)global::System.Runtime.CompilerServices.Unsafe.AsPointer(ref _testField[0]), 13);
                              }
                              """;

        await VerifyIG.VerifyGeneratorAsync(
            code,
            ("TestStruct.InteropGenerator.g.cs", result),
            SourceGeneration.GetFixedSizeArraySource([3]));
    }
}
